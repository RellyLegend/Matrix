"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updated = exports.unbanned = exports.banned = exports.removed = exports.joined = void 0;
const ServerBan_1 = require("../../structures/server/ServerBan");
const ServerMember_1 = require("../../structures/server/ServerMember");
/**
 * Handle the TeamMemberJoined event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function joined(client, data) {
    const server = await client.servers.fetch(data.serverId);
    const member = new ServerMember_1.ServerMember(server, data.member);
    client.emit('memberAdd', member);
}
exports.joined = joined;
/**
 * Handle the TeamMemberRemoved event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function removed(client, data) {
    const server = await client.servers.fetch(data.serverId);
    if (client.options.disposeCachedServerMembers ?? true)
        server.members.cache.delete(data.userId);
    client.emit('memberRemove', data, server);
}
exports.removed = removed;
/**
 * Handle the TeamMemberBanned event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function banned(client, data) {
    const server = await client.servers.fetch(data.serverId);
    const ban = new ServerBan_1.ServerBan(server, data.serverMemberBan);
    client.emit('memberBan', ban);
}
exports.banned = banned;
/**
 * Handle the TeamMemberUnbanned event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function unbanned(client, data) {
    const server = await client.servers.fetch(data.serverId);
    const ban = new ServerBan_1.ServerBan(server, data.serverMemberBan);
    if (client.options.disposeCachedServerBans ?? true)
        server.bans.cache.delete(ban.id);
    client.emit('memberUnban', ban);
}
exports.unbanned = unbanned;
/**
 * Handle the TeamMemberUpdated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function updated(client, data) {
    const server = await client.servers.fetch(data.serverId);
    const oldMember = server.members.cache.get(data.userInfo.id);
    const newMember = await server.members.fetch(data.userInfo.id);
    newMember.nickname = data.userInfo.nickname;
    client.emit('memberEdit', newMember, oldMember);
}
exports.updated = updated;
//# sourceMappingURL=member.js.map